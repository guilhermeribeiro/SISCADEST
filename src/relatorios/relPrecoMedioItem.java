/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package relatorios;


import cadastros.agendamentoPanel;
import com.itextpdf.text.Document;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Desktop;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.text.MaskFormatter;
import mysql.conexao;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author Alan
 */
public class relPrecoMedioItem extends javax.swing.JFrame {

    
    private conexao conexao_preco_medio_itens;
    private conexao conexao_itens;
    private static conexao database;
    private static conexao database_list;
    
    
     MaskFormatter  ftmData, ftmData2;
    /**
     * Creates new form relServicos 
     */
    public relPrecoMedioItem() {
        initComponents();
        setLocationRelativeTo(null);//localiza onde irá aparecer a tela
        setResizable(false);//proibido redimensionar ou naum
        
        
        try{
            ArrayList<String> groupNames = new ArrayList<String>();
            conexaoItens();
            groupNames.add("Todos");
            while (conexao_itens.resultset.next()) { 
                String groupName = conexao_itens.resultset.getString("item_id"); 
                groupNames.add(groupName);
            } 
            // Populate the combo box
            DefaultComboBoxModel model = new DefaultComboBoxModel(groupNames.toArray());
            cmbCodItem.setModel(model);
        }
        catch (Exception erro) {
            JOptionPane.showMessageDialog(null, "Não foi possível carregar a combo com os Itens, erro = " + erro);
        }
        
      
    }
    
    private void conexaoItens(){
        conexao_itens= new conexao();
        conexao_itens.conecta();
        conexao_itens.executaSQL("select item_id from itens order by item_id");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        cmbCodItem = new javax.swing.JComboBox();
        jButton2 = new javax.swing.JButton();
        date_fim = new net.sf.nachocalendar.components.DateField();
        date_ini = new net.sf.nachocalendar.components.DateField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Preço Médio do Produto");

        jLabel1.setText("Periodo: ");

        jButton1.setText("Gerar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Selecione um item:");

        //cmbCodItem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbCodItem.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbCodItemItemStateChanged(evt);
            }
        });

        jButton2.setText("Cancelar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(cmbCodItem, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(49, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(date_ini, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(date_fim, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)))
                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmbCodItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(date_fim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(date_ini, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public void precoMedioItemExcel(String nomeArquivo) throws FileNotFoundException, IOException {

        database = new conexao();
        database.conecta();
        
        database_list = new conexao();
        database_list.conecta();
        
        FileInputStream fsIP= new FileInputStream(new File(nomeArquivo)); 
        
        XSSFWorkbook workbook = new XSSFWorkbook(fsIP);
        XSSFSheet firstSheet = workbook.getSheetAt(0);
        
        XSSFSheet secondSheet = workbook.getSheetAt(1);

        FileOutputStream fos = null;
        XSSFCell cell = null;

        try {
// Este trecho obtem uma lista de objetos do tipo CD
// do banco de dados através de um DAO e itera sobre a lista
// criando linhas e colunas em um arquivo Excel com o conteúdo
// dos objetos.
            Date choosed = (Date) date_ini.getValue();       
            SimpleDateFormat formatador_banco = new SimpleDateFormat("yyyy-MM-dd"); 
            SimpleDateFormat formatador_relat = new SimpleDateFormat("dd/MM/yyyy"); 
            
            Date choosed_f = (Date) date_fim.getValue();       
     
            //java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("dd/MM/yyyy");
            String DATA_INICIO = formatador_banco.format( choosed );
            
            //java.text.SimpleDateFormat sdf2 = new java.text.SimpleDateFormat("yyyy-MM-dd");
            String DATA_FIM = formatador_banco.format( choosed_f );
            
            
            // Calcula a diferença entre a data final e a data inicial para verificar
            // se o resultado desse valor é maior que 31 dias, caso seja, o relatório
            // não será gerado.
            int diff = (int) ((choosed_f.getTime()-choosed.getTime()) / (1000 * 60 * 60 * 24) );
            
            if (diff > 31){
                JOptionPane.showMessageDialog(null, "Intervalo de data maior que 31 dias!");
                return;
            }
            else{
                if(cmbCodItem.getSelectedItem()=="Todos"){
                    String sql = "select item_id, sum(preco_item * quantidade_itens)/sum(quantidade_itens) as media_ponderada \n" +
                    "from entrada_estoque \n" +
                    "where data_nota_fiscal between str_to_date('"+ DATA_INICIO +"','%Y-%m-%d') \n" +
                    "and str_to_date('"+ DATA_FIM +"','%Y-%m-%d')\n" +
                    "group by item_id";
                    
                    String sqlList = "select item_id, quantidade_itens, preco_item, item_fornecedor from entrada_estoque \n" +
                     "where data_nota_fiscal between str_to_date('"+ DATA_INICIO +"','%Y-%m-%d') \n" +
                    "and str_to_date('"+ DATA_FIM +"','%Y-%m-%d') ";
                    

                    database.executaSQL(sql);
                    database_list.executaSQL(sqlList);
                } else {
                   String sql = "select item_id, sum(preco_item * quantidade_itens)/sum(quantidade_itens) as media_ponderada \n" +
                    "from entrada_estoque \n"+
                    "where data_nota_fiscal between str_to_date('"+ DATA_INICIO +"','%Y-%m-%d') \n" +
                    "and str_to_date('"+ DATA_FIM +"','%Y-%m-%d') and item_id = '"+ cmbCodItem.getSelectedItem() +"'\n" +
                    "group by item_id";
                   
                   String sqlList = "select item_id, quantidade_itens, preco_item, item_fornecedor from entrada_estoque \n" +
                     "where data_nota_fiscal between str_to_date('"+ DATA_INICIO +"','%Y-%m-%d') \n" +
                    "and str_to_date('"+ DATA_FIM +"','%Y-%m-%d') and item_id = '"+ cmbCodItem.getSelectedItem() +"'";
                   
                   database.executaSQL(sql);
                   database_list.executaSQL(sqlList);
                }
            }
            
            
            ResultSet result = database.resultset;
            ResultSet resultList = database_list.resultset;
            
            
            
            int r = 9;
            
            /*row.createCell(0).setCellValue("cod".toUpperCase());
            row.createCell(1).setCellValue("nome".toUpperCase());
            row.createCell(2).setCellValue("preco".toUpperCase());
            row.createCell(3).setCellValue("nomecliente".toUpperCase());
            row.createCell(4).setCellValue("formaPagamento".toUpperCase());
            row.createCell(5).setCellValue("data".toUpperCase());*/
            
            DATA_INICIO = formatador_relat.format(choosed);
            DATA_FIM = formatador_relat.format(choosed_f);
            //result_soma.first();
            XSSFRow x = firstSheet.getRow(5);
            cell = x.getCell(7);
            cell.setCellValue(DATA_INICIO);
            
            x = firstSheet.getRow(6);
            cell = x.getCell(7);
            cell.setCellValue(DATA_FIM);
            
            
            while(result.next())
            {
                //row = firstSheet.createRow(i++);

                XSSFRow sheetrow = firstSheet.getRow(r);
                if(sheetrow == null){
                    sheetrow = firstSheet.createRow(r);
                }
                //Update the value of cell
                cell = sheetrow.getCell(7);
                if(cell == null){
                    cell = sheetrow.createCell(7);
                }
                cell.setCellValue(result.getString("item_id"));
                
                cell = sheetrow.getCell(8);
                if(cell == null){
                    cell = sheetrow.createCell(8);
                }
                cell.setCellValue(result.getDouble("media_ponderada"));
                
                r++;
                //row.createCell(5).setCellValue(result.getString("data"));
            }
            
            
            int i = 1;
             while(resultList.next())
            {
                //row = firstSheet.createRow(i++);

                XSSFRow sheetrow = secondSheet.getRow(i);
                if(sheetrow == null){
                    sheetrow = secondSheet.createRow(i);
                }
                //Update the value of cell
                cell = sheetrow.getCell(0);
                if(cell == null){
                    cell = sheetrow.createCell(0);
                }
                cell.setCellValue(resultList.getString("item_id"));
                
                cell = sheetrow.getCell(1);
                if(cell == null){
                    cell = sheetrow.createCell(1);
                }
                cell.setCellValue(resultList.getInt("quantidade_itens"));
                
                cell = sheetrow.getCell(2);
                if(cell == null){
                    cell = sheetrow.createCell(2);
                }
                cell.setCellValue(resultList.getString("item_fornecedor"));
                
                cell = sheetrow.getCell(3);
                if(cell == null){
                    cell = sheetrow.createCell(3);
                }
                cell.setCellValue(resultList.getDouble("preco_item"));
                
                i++;
                //row.createCell(5).setCellValue(result.getString("data"));
            }
            
            
            
            fsIP.close(); 
            
            JFileChooser arquivo2 = new JFileChooser("E:/");
            int retorno = arquivo2.showSaveDialog(null);
                if(retorno == JFileChooser.APPROVE_OPTION){
                String url = arquivo2.getSelectedFile().getAbsolutePath(); 
                //File diretorio = new File(url);  
                //File arquivo = new File(url+".sql"); 
                
                //fos = new FileOutputStream(nomeArquivo);
                
                fos = new FileOutputStream(url+".xlsx");
                workbook.write(fos);
                
                JOptionPane.showMessageDialog(null, "Relatório Gerado com Sucesso!");
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Erro ao exportar arquivo");
        } finally {
            try {
                fos.flush();
                fos.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //relItensPreco greport = new relItensPreco();
        
        try {
            precoMedioItemExcel("Relat_preco_medio_itens.xlsx");
            //JOptionPane.showMessageDialog(null, "Relatório Gerado com Sucesso!");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Não foi possível Gerar o Relatório do Custo de Itens. Motivo: " + ex);
        }
        //SalvDiretorio(jt_periodo.getText());
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cmbCodItemItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbCodItemItemStateChanged

    }//GEN-LAST:event_cmbCodItemItemStateChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    
    public void SalvDiretorio(String data){
        String caminhoArquivo = "";
        JFileChooser arquivo = new JFileChooser();
        int retorno = arquivo.showSaveDialog(null);
        if(retorno == JFileChooser.APPROVE_OPTION){
        caminhoArquivo = arquivo.getSelectedFile().getAbsolutePath();
            try {
               //gerarPdfCliente(caminhoArquivo,data);
               visualisarPdfCliente(caminhoArquivo+".pdf");
            } catch (Exception ex) {
                Logger.getLogger(relServicos.class.getName()).log(Level.SEVERE, null, ex);
            }
              
        //JOptionPane.showMessageDialog(null, caminhoArquivo);
        }else{
        //não abriu
        }
    }
    public void visualisarPdfCliente(String url){
         
                File pdf = new File(url);  
                try {  
                Desktop.getDesktop().open(pdf);  
                } catch(Exception ex) {  
                ex.printStackTrace();  
                JOptionPane.showMessageDialog(null, "Erro no Desktop: " + ex);  
                } 
     }
    
    
    
    /**
     * @param args the command line arguments
     */
    
     private void conexaoPrecoMedioItem(){
         conexao_preco_medio_itens= new conexao();
         conexao_preco_medio_itens.conecta();
         
         
    }
   
 
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(relServicos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(relServicos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(relServicos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(relServicos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new relPrecoMedioItem().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cmbCodItem;
    private net.sf.nachocalendar.components.DateField date_fim;
    private net.sf.nachocalendar.components.DateField date_ini;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
